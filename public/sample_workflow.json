{
    "workflowName": "綜合範例工作流 (OpenAI Agents)",
    "workflowDescription": "一個包含所有節點類型和多種交互的複雜工作流，參考官方 SDK 範例。",
    "nodes": [
      {
        "id": "input_start_workflow",
        "type": "input",
        "position": { "x": 50, "y": 400 },
        "data": {
          "nodeType": "input",
          "name": "用戶初始請求",
          "message": "Tell me about the first president of the United States and also calculate 2 + 2.",
          "isExpanded": true
        }
      },
      {
        "id": "guardrail_homework_check",
        "type": "guardrail",
        "position": { "x": 350, "y": 150 },
        "data": {
          "nodeType": "guardrail",
          "name": "作業問題檢查器",
          "guardrailType": "input",
          "description": "檢查用戶輸入是否與家庭作業相關。如果不是作業，則繼續。",
          "internalAgentName": "HomeworkCheckAgent",
          "internalAgentInstructions": "You are an agent that checks if the user's query is about homework. Respond with is_homework (boolean) and reasoning (string).",
          "internalAgentPydanticSchema": {
            "modelName": "HomeworkCheckOutput",
            "description": "Output schema for homework check guardrail agent.",
            "fields": [
              { "id": "field_hw_1_unique", "name": "is_homework", "type": "boolean", "isOptional": false, "description": "True if the query is about homework." },
              { "id": "field_hw_2_unique", "name": "reasoning", "type": "string", "isOptional": false, "description": "Reasoning behind the decision." }
            ]
          },
          "tripwireConditionLogic": "output.is_homework == True",
          "isExpanded": false
        }
      },
      {
        "id": "agent_triage_main",
        "type": "agent",
        "position": { "x": 650, "y": 400 },
        "data": {
          "nodeType": "agent",
          "name": "請求分流 Agent",
          "instructions": "You are a helpful assistant. Analyze the user's request. If it's a math question, handoff to MathTutor. If it's a history question, handoff to HistoryTutor. If it involves calculation, use the calculator tool. For weather, use the weather tool. Otherwise, try to answer directly.",
          "handoff_description": "Hands off to specialized agents based on query type if tools are not suitable.",
          "pydanticSchema": {
            "modelName": "TriageFinalAnswer",
            "description": "The final answer or summary provided by the Triage agent after processing.",
            "fields": [
              { "id": "field_tfa_1_unique", "name": "final_content", "type": "string", "isOptional": false, "description": "The comprehensive answer or a summary of handoff/tool use." },
              { "id": "field_tfa_2_unique", "name": "action_taken", "type": "string", "isOptional": false, "description": "Brief description of action (e.g., 'answered_directly', 'handed_off_to_math', 'used_calculator_tool')."}
            ]
          },
          "isExpanded": true
        }
      },
      {
        "id": "tool_get_weather",
        "type": "functionTool",
        "position": { "x": 350, "y": 400 },
        "data": {
          "nodeType": "functionTool",
          "name": "獲取天氣工具",
          "description": "Get the current weather for a given city.",
          "parameters": [
            { "id": "param_gw_1_unique", "name": "city", "type": "string" }
          ],
          "returnType": "string",
          "implementation": "import random\nchoices = [\"sunny\", \"cloudy\", \"rainy\", \"snowy\"]\nreturn f\"The weather in {city} is {random.choice(choices)}.\"",
          "isExpanded": false
        }
      },
      {
        "id": "tool_calculator",
        "type": "functionTool",
        "position": { "x": 350, "y": 580 },
        "data": {
          "nodeType": "functionTool",
          "name": "簡易計算機工具",
          "description": "Performs simple arithmetic (add, subtract, multiply, divide). Operator should be '+', '-', '*', '/'.",
          "parameters": [
            { "id": "param_calc_1_unique", "name": "operand1", "type": "number" },
            { "id": "param_calc_2_unique", "name": "operator", "type": "string" },
            { "id": "param_calc_3_unique", "name": "operand2", "type": "number" }
          ],
          "returnType": "number",
          "implementation": "if operator == '+':\n  return operand1 + operand2\nelif operator == '-':\n  return operand1 - operand2\nelif operator == '*':\n  return operand1 * operand2\nelif operator == '/' and operand2 != 0:\n  return operand1 / operand2\nelif operator == '/' and operand2 == 0:\n  raise ValueError(\"Cannot divide by zero\")\nelse:\n  raise ValueError(f\"Unknown operator: {operator}\")",
          "isExpanded": false
        }
      },
      {
        "id": "agent_math_tutor",
        "type": "agent",
        "position": { "x": 1000, "y": 250 },
        "data": {
          "nodeType": "agent",
          "name": "數學導師 Agent",
          "instructions": "You are a specialist in mathematics. Explain your reasoning step by step and include examples if possible. Your output should be a MathProblemSolution.",
          "handoff_description": "Specialist for math questions that the Triage agent cannot handle with tools.",
          "pydanticSchema": {
            "modelName": "MathProblemSolution",
            "description": "Provides a solution and explanation for a math problem.",
            "fields": [
              { "id": "field_mps_1_unique", "name": "problem_statement", "type": "string", "isOptional": false, "description": "The original math problem." },
              { "id": "field_mps_2_unique", "name": "solution_steps", "type": "list", "isOptional": false, "description": "Step-by-step explanation as a list of strings." },
              { "id": "field_mps_3_unique", "name": "final_answer", "type": "string", "isOptional": false, "description": "The final answer to the problem." }
            ]
          },
          "isExpanded": false
        }
      },
      {
        "id": "agent_history_tutor",
        "type": "agent",
        "position": { "x": 1000, "y": 550 },
        "data": {
          "nodeType": "agent",
          "name": "歷史導師 Agent",
          "instructions": "You are a specialist in history. Explain important events and context clearly. Provide detailed information.",
          "handoff_description": "Specialist for historical questions.",
          "isExpanded": true
        }
      },
      {
          "id": "guardrail_history_filter",
          "type": "guardrail",
          "position": { "x": 1300, "y": 650 },
          "data": {
            "nodeType": "guardrail",
            "name": "歷史內容過濾器",
            "guardrailType": "output",
            "description": "Ensures historical answers are neutral, respectful, and cite sources if making specific claims. Tripwire if critique is severe.",
            "internalAgentName": "HistoryOutputReviewAgent",
            "internalAgentInstructions": "Review the historical explanation. Check for neutrality, respectfulness, and presence of source citations for claims. Output fields: `is_appropriate` (boolean), `critique_level` (string, e.g., 'minor', 'major'), `suggestions` (string).",
            "internalAgentPydanticSchema": {
              "modelName": "HistoryReviewOutput",
              "description": "Output for historical content review.",
              "fields": [
                { "id": "field_hr_1_unique", "name": "is_appropriate", "type": "boolean", "isOptional": false },
                { "id": "field_hr_2_unique", "name": "critique_level", "type": "string", "isOptional": false },
                { "id": "field_hr_3_unique", "name": "suggestions", "type": "string", "isOptional": true }
              ]
            },
            "tripwireConditionLogic": "output.critique_level == 'major'", 
            "isExpanded": false
          }
      },
      {
        "id": "runner_main_execution",
        "type": "runner",
        "position": { "x": 650, "y": 700 },
        "data": {
          "nodeType": "runner",
          "name": "主流程執行器",
          "input": "Tell me about the first president of the United States and also calculate 2 + 2.", 
          "execution_mode": "async",
          "isExpanded": true
        }
      },
      {
        "id": "runner_math_specialist",
        "type": "runner",
        "position": { "x": 1300, "y": 250 },
        "data": {
          "nodeType": "runner",
          "name": "數學專家執行器",
          "input": "", 
          "execution_mode": "sync",
          "context": "{'calculation_precision': 'high'}",
          "isExpanded": false
        }
      },
      {
        "id": "runner_history_specialist",
        "type": "runner",
        "position": { "x": 1300, "y": 450 },
        "data": {
          "nodeType": "runner",
          "name": "歷史專家執行器",
          "input": "",
          "execution_mode": "async",
          "isExpanded": false
        }
      }
    ],
    "edges": [
      { "id": "edge_input_conceptual_to_triage", "source": "input_start_workflow", "target": "agent_triage_main", "type": "custom", "label": "Initial Input", "animated": false, "style": { "strokeDasharray": "5,5", "stroke":"#9ca3af" }, "markerEnd": { "type": "arrowclosed", "color": "#9ca3af"} },
      { "id": "edge_guardrail_input_to_triage", "source": "guardrail_homework_check", "target": "agent_triage_main", "type": "custom", "label": "Input Guardrail", "animated": true, "markerEnd": { "type": "arrowclosed"} },
      { "id": "edge_triage_uses_tool_weather", "source": "tool_get_weather", "target": "agent_triage_main", "type": "custom", "label": "Uses Tool", "animated": true, "markerEnd": { "type": "arrowclosed"} },
      { "id": "edge_triage_uses_tool_calculator", "source": "tool_calculator", "target": "agent_triage_main", "type": "custom", "label": "Uses Tool", "animated": true, "markerEnd": { "type": "arrowclosed"} },
      { "id": "edge_triage_handoff_math", "source": "agent_triage_main", "target": "agent_math_tutor", "type": "custom", "label": "Handoff: Math", "animated": true, "markerEnd": { "type": "arrowclosed"} },
      { "id": "edge_triage_handoff_history", "source": "agent_triage_main", "target": "agent_history_tutor", "type": "custom", "label": "Handoff: History", "animated": true, "markerEnd": { "type": "arrowclosed"} },
      { "id": "edge_history_output_guardrail", "source": "guardrail_history_filter", "target": "agent_history_tutor", "type": "custom", "label": "Output Guardrail", "animated": true, "markerEnd": { "type": "arrowclosed"} },
  

       { "id": "edge_agent_triage_to_runner_main", "source": "agent_triage_main", "target": "runner_main_execution", "type": "custom", "label": "Executed by", "animated": false, "style": { "strokeDasharray": "5,5", "stroke":"#6b7280" }, "markerEnd": { "type": "arrowclosed", "color": "#6b7280"} },

       { "id": "edge_agent_math_to_runner_math", "source": "agent_math_tutor", "target": "runner_math_specialist", "type": "custom", "label": "Executed by", "animated": false, "style": { "strokeDasharray": "5,5", "stroke":"#6b7280" }, "markerEnd": { "type": "arrowclosed", "color": "#6b7280"} },
   
       { "id": "edge_agent_history_to_runner_history", "source": "agent_history_tutor", "target": "runner_history_specialist", "type": "custom", "label": "Executed by", "animated": false, "style": { "strokeDasharray": "5,5", "stroke":"#6b7280" }, "markerEnd": { "type": "arrowclosed", "color": "#6b7280"} }
    ]
  }